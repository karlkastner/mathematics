from split
/*
		for (int j=0; j<4; j++)
		{ 
			// check if there is not yet a neighbour assigned to that side

			if (DEBUG.level > 0)
			{
				final int [][] q = {
					{ 1, 2, 3},
					{ 0, 2, 3},
					{ 0, 1, 3},
					{ 0, 1, 2} };
				int p0 = get_vertex(i,q[j][0]);
				int p1 = get_vertex(i,q[j][1]);
				int p2 = get_vertex(i,q[j][2]);
				Key3 key3 = new Key3(p0, p1, p2);
				int [] val = N_hash.get(key3);
				if ( ( null == val ) && ( 0 == get_neighbour(i,j) ) )
				{
					// does never happen
					throw new RuntimeException();
				}
				if ( ( 0 == get_neighbour(i,j) ) )
				{
					if (0 == get_parent(i))
					{
						// does never happen
						throw new RuntimeException();
					}
					int nj = get_neighbour(get_parent(i)-1,j);
					if (nj != val[2])
					{
						throw new RuntimeException(nj + " " + val[2]);
					}
				}
			} // DEBUG checks

			if (0 == get_neighbour(i,j))
			{
				// there is not yet a neighbour, so recursively split its parent
				int parent = get_parent(i);
				if (parent > 0)
				{
					// to be neighbour is a tetrahedron
					int nj = get_neighbour(parent-1,j);
					split(nj - 1);
				} else {
					// to be neighbour is a boundary - that should never happen
					// as neighbouring boundaries are split emmideately
					throw new RuntimeException();
				}
			} // null != val
		} // for j (conformity rule 1)
*/

